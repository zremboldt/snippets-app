import { Dialog, DialogTrigger, DialogWrapper } from '../../components/dialog';
import Head from 'next/head'
import { useState, useEffect } from 'react'
import DialogCreateSnippet from '../../components/dialog_create-snippet';
import { styled } from '../../styles/stitches-theme';
import { baseButtonStyles } from '../../styles/base-styles';
import TextCard from '../../components/snippet-card_text';
import ImageCard from '../../components/snippet-card_image';
import Searchbar from '../../components/searchbar';

export default function AllSnippets() {
  const [open, setOpen] = useState(false);
  const [data, setData] = useState(null);
  const [searchQuery, setSearchQuery] = useState(null);
  const [searchResults, setSearchResults] = useState(null);
  const [isLoading, setLoading] = useState(true);

  console.log(searchQuery)

  useEffect(() => {
    setLoading(true)
    fetch('http://localhost:3000/api/v1/snippets', {
      method: "GET",
      headers: { "Content-Type": 'application/json' },
    })
      .then((res) => res.json())
      .then(({ status, message, data }) => {
        setData({
          snippets: data,
          collection: null
        })
        setLoading(false)
      })
  }, [])

  
  if (isLoading) return null;
  
  if (searchQuery?.length > 2) {
    const filteredData = data.snippets.filter((snippet) => {
      const queryMatchesTitle = snippet?.title?.toLowerCase().includes(searchQuery.toLowerCase())
      const queryMatchesLabels = snippet?.labels?.some(({name}) => name.toLowerCase().includes(searchQuery.toLowerCase()))

      if (queryMatchesTitle || queryMatchesLabels) { return true }
      return false
    })

    if (filteredData.length > 0 && filteredData.length !== searchResults?.length) {
      setSearchResults(filteredData)
    }
  } else if (searchResults !== null) {
    setSearchResults(null)
  }

  return (
    <div className='layout'>
      <Head>
        <title>Snippets</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Searchbar setSearchQuery={setSearchQuery} />

      <main>
        <PageTitle>All Snippets</PageTitle>

        {searchResults?.length && (
          <Grid>
            {searchResults.map((snippet) => {
              if (snippet.optimisticImage || snippet.image) {
                return (
                  <ImageCard
                    key={snippet.id}
                    setData={setData}
                    data={data}
                    {...snippet}
                  />
                )
              }

              return (
                <TextCard
                  key={snippet.id}
                  setData={setData}
                  data={data}
                  {...snippet}
                />
              )
            })}
          </Grid>
        )}

        {searchResults === null && (
          data.snippets.length ? (
            <Grid>
              {data.snippets.map((snippet) => {
                if (snippet.optimisticImage || snippet.image) {
                  return (
                    <ImageCard
                      key={snippet.id}
                      setData={setData}
                      data={data}
                      {...snippet}
                    />
                  )
                }

                return (
                  <TextCard
                    key={snippet.id}
                    setData={setData}
                    data={data}
                    {...snippet}
                  />
                )
              })}
            </Grid>
          ) : (
            <p>Add some snippets!</p>
          )
        )}
      </main>

      <Dialog open={open} onOpenChange={() => setOpen(!open)}>
        <NewSnippetButton>New snippet +</NewSnippetButton>
        <DialogWrapper>
          <DialogCreateSnippet
            setOpen={setOpen}
            data={data}
            setData={setData}
          />
        </DialogWrapper>
      </Dialog>
    </div>
  )
}

const PageTitle = styled('h1', {
  marginBottom: 60,
});

const Grid = styled('div', {
  display: 'grid',
  gap: 24,
  gridTemplateColumns: '1fr',
  '@bp1': { gridTemplateColumns: '1fr 1fr' },
  '@bp3': { gridTemplateColumns: '1fr 1fr 1fr' }
});

const NewSnippetButton = styled(DialogTrigger, {
  ...baseButtonStyles,
  position: 'fixed',
  bottom: 'min(30px, 2vw)',
  right: 'min(30px, 2vw)',
  '&:focus-visible': {
    outline: '3px solid black',
    outlineOffset: 3,
  }
});